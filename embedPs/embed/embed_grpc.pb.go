// 标识此文件使用的语法版本是protobuf3

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: embed.proto

package embed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmbServer_Lookup_FullMethodName = "/EmbServer/Lookup"
)

// EmbServerClient is the client API for EmbServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbServerClient interface {
	Lookup(ctx context.Context, in *EmbReqData, opts ...grpc.CallOption) (*EmbResp, error)
}

type embServerClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbServerClient(cc grpc.ClientConnInterface) EmbServerClient {
	return &embServerClient{cc}
}

func (c *embServerClient) Lookup(ctx context.Context, in *EmbReqData, opts ...grpc.CallOption) (*EmbResp, error) {
	out := new(EmbResp)
	err := c.cc.Invoke(ctx, EmbServer_Lookup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbServerServer is the server API for EmbServer service.
// All implementations must embed UnimplementedEmbServerServer
// for forward compatibility
type EmbServerServer interface {
	Lookup(context.Context, *EmbReqData) (*EmbResp, error)
	mustEmbedUnimplementedEmbServerServer()
}

// UnimplementedEmbServerServer must be embedded to have forward compatible implementations.
type UnimplementedEmbServerServer struct {
}

func (UnimplementedEmbServerServer) Lookup(context.Context, *EmbReqData) (*EmbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedEmbServerServer) mustEmbedUnimplementedEmbServerServer() {}

// UnsafeEmbServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbServerServer will
// result in compilation errors.
type UnsafeEmbServerServer interface {
	mustEmbedUnimplementedEmbServerServer()
}

func RegisterEmbServerServer(s grpc.ServiceRegistrar, srv EmbServerServer) {
	s.RegisterService(&EmbServer_ServiceDesc, srv)
}

func _EmbServer_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbServerServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbServer_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbServerServer).Lookup(ctx, req.(*EmbReqData))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbServer_ServiceDesc is the grpc.ServiceDesc for EmbServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmbServer",
	HandlerType: (*EmbServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _EmbServer_Lookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "embed.proto",
}
